cert-manager:
  enabled: false
  namespace: cert-manager
  fullnameOverride: cert-manager
  skipNamespace: false
  # Example configuration to specify recursive nameservers only.
  # extraArgs:
  # - --dns01-recursive-nameservers-only
  # - --dns01-recursive-nameservers=1.1.1.1:53,8.8.8.8:53
  issuer:
    # Note: for the issuer to be created sealed-secrets is also required.
    # certManager (https://cert-manager.io/docs/) is required for tls certificates. 
    enabled: false
    name: cert-manager
    namespaceOverride: ""
    kind: ClusterIssuer
    secrets:
      dnsSecretAccessKey: ""
      acmeExternalAccountKey: ""
    email: ""
    # LetsEncrypt ACME staging is used by default. To use for production, change the url to:
    # https://acme-v02.api.letsencrypt.org/directory
    # For ZeroSSL, change the URL to https://acme.zerossl.com/v2/DV90
    acmeServer: https://acme-staging-v02.api.letsencrypt.org/directory
    acmeExternalAccountKeyId: ""
    # DNS providers currently supported include "route53" and "cloudflare".
    dnsProvider: route53
    route53Region: us-east-1
    route53HostedZoneId: ""
    route53AccessKeyId: ""
# Documentation for the cilium helm chart can be found here: https://docs.cilium.io/en/latest/helm-reference/
cilium:
  enabled: true
  ipam:
    operator:
      clusterPoolIPv4PodCIDRList:
      - 100.64.0.0/16
  kubeProxyReplacement: strict
  k8sServiceHost: 127.0.0.1
  k8sServicePort: 6443
  ipMasqAgent:
    enabled: true
  nonMasqueradeCIDRs:
  - 100.64.0.0/16
  - 100.65.0.0/16
  loadBalancer:
    mode: hybrid
    serviceTopology: true
  tunnel:
    disabled
  ipv4NativeRoutingCIDR: 100.64.0.0/15
  autoDirectNodeRoutes: true
  l7Proxy: false
  installIptablesRules: true
  cgroup:
    autoMount:
      enabled: true
    # hostRoot: /sys/fs/cgroup
  enableIPv4Masquerade: true
  bpf:
    masquerade: true
  hubble:
    enabled: false
    metrics:
      enabled:
        - flow
        - dns
        - tcp
        - icmp
        - http
        - drop
    ui:
      enabled: false
    relay:
      enabled: false
# Documentation for the coredns helm chart can be found here: https://github.com/coredns/helm
coredns:
  fullnameOverride: coredns
  enabled: true
  deployment: 
    name: coredns
  service:
    clusterIP: 100.65.0.10
  replicaCount: 3
  servers:
  - zones:
    - zone: .
    port: 53
    plugins:
    - name: errors
    - name: health
      configBlock: |-
        lameduck 5s
    - name: ready
    - name: kubernetes
      parameters: cluster.local in-addr.arpa ip6.arpa
      configBlock: |-
        pods insecure
        fallthrough in-addr.arpa ip6.arpa
        ttl 30
    - name: prometheus
      parameters: 0.0.0.0:9153
    - name: forward
      parameters: . 1.1.1.1 8.8.8.8
    - name: cache
      parameters: 30
    - name: loop
    - name: reload
    - name: loadbalance
  # - zones:
  #   - zone: example.com
  #     use_tcp: true
  #   port: 53
  #   plugins:
  #   - name: forward
  #     parameters: . 192.0.2.2 192.0.2.3

ingress-nginx:
  enabled: false
  fullnameOverride: ingress-nginx
  controller:
    kind: DaemonSet
    ingressClassResource:
      default: true
    # This is used because the same is added on nginx with microk8s when installing with 'microk8s enable ingress'
    ingressClass: "public"
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
    service:
      enabled: false
  ingressService:
    enabled: true
    ipAddress: "" # i.e. 192.0.2.20
    selector: "app.kubernetes.io/name: ingress-nginx"

longhorn:
  enabled: true
  namespaceOverride: "longhorn-system"

metallb:
  enabled: false
  namespace: metallb-system
  addresses: []
  # - 192.0.2.0/24

sealed-secrets:
  enabled: true
  fullnameOverride: sealed-secrets
  namespace: sealed-secrets

system-upgrade-controller:
  enabled: false
  k3s:
    enabled: true
    version: v1.24.4+k3s1
  ubuntu:
    enabled: true
